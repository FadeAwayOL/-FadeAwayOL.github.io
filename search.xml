<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>stach局部变量</title>
      <link href="/2020/08/29/stach%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/"/>
      <url>/2020/08/29/stach%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>try catch用法</title>
      <link href="/2020/08/29/catch%E7%94%A8%E6%B3%95/"/>
      <url>/2020/08/29/catch%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>指针引用规则</title>
      <link href="/2020/08/29/%E6%8C%87%E9%92%88%E5%BC%95%E7%94%A8%E8%A7%84%E5%88%99/"/>
      <url>/2020/08/29/%E6%8C%87%E9%92%88%E5%BC%95%E7%94%A8%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多态</title>
      <link href="/2020/08/28/%E5%A4%9A%E6%80%81/"/>
      <url>/2020/08/28/%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言商品进销存管理系统（5）</title>
      <link href="/2020/07/25/c%E8%AF%AD%E8%A8%80%E5%95%86%E5%93%81%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%885%EF%BC%89/"/>
      <url>/2020/07/25/c%E8%AF%AD%E8%A8%80%E5%95%86%E5%93%81%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%885%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="保存商品信息到硬盘文件"><a href="#保存商品信息到硬盘文件" class="headerlink" title="保存商品信息到硬盘文件"></a>保存商品信息到硬盘文件</h2><p>保存商品信息到硬盘文件包括通过键盘录入路径及名称新建或修改一个文件用于存储已保留的商品信息。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> name[N];</span><br><span class="line">FILE* fp;</span><br><span class="line"><span class="keyword">if</span> (input == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t请输入文件路径及文件名:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, name);<span class="comment">//检查 </span></span><br><span class="line">FILE* fp = fopen(name, <span class="string">"w+"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"商品编号\t\t商品名称\t\t商品数量\t\t商品单价\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%d\t\t%s\t\t%d\t\t%f\t\t\n"</span>, a[i].num, a[i].name, a[i].quantity, a[i].price);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t文件已保存！\n"</span>);</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  <span class="built_in">printf</span>(<span class="string">"---------------------------------------------------\n\t\t无可保存的商品信息\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="从硬盘文件获得商品信息"><a href="#从硬盘文件获得商品信息" class="headerlink" title="从硬盘文件获得商品信息"></a>从硬盘文件获得商品信息</h1><p>从硬盘文件获得商品信息包括通过键盘录入路径及名称查找到一个已存在的文件用于读取文件中的的商品信息。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">char</span> name[N];</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">FILE* fp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t请输入要读取文件路径或文件名:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, name);</span><br><span class="line"><span class="keyword">if</span> ((fp = fopen(name, <span class="string">"r"</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t该文件不存在！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!feof(fp))</span><br><span class="line">&#123;</span><br><span class="line">ch = fgetc(fp);</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'\n'</span>)</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">n = j;</span><br><span class="line">fclose(fp);</span><br><span class="line">fp = fopen(name, <span class="string">"r"</span>);</span><br><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">"商品编号\t\t商品名称\t\t商品数量\t\t商品单价\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">"%d%s%d%f"</span>, &amp;a[i].num, a[i].name, &amp;a[i].quantity, &amp;a[i].price);</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">input = <span class="number">1</span>;</span><br><span class="line">output_goods(a);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">product</span> <span class="title">a</span>[<span class="title">N</span>];</span></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t  -小型商场进销存管理系统-\n\t ========================\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\t\t1-输入商品信息\n\t\t2-浏览商品信息\n\t\t3-输入进货信息\n\t\t4-输入销售信息\n\t\t5-查询商品信息\n\t\t6-修改商品信息\n\t\t7-增加/删除商品\n\t\t8-商品信息排序\n\t\t9-保存商品信息\n\t\t10-导入商品信息\n\t\t ----------------------\n\t"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请选择您所需要的操作（选择”0“退出）:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"><span class="keyword">switch</span> (m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:input_goods(a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:output_goods(a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:purchase(a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:sale(a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:search(a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:modify(a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:edit(a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:order(a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:save(a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:<span class="built_in">read</span>(a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t\t谢谢使用"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">"\n\t\t选择错误，请重新输入\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 答辩材料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言商品进销存管理系统（4）</title>
      <link href="/2020/07/25/c%E8%AF%AD%E8%A8%80%E5%95%86%E5%93%81%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%884%EF%BC%89/"/>
      <url>/2020/07/25/c%E8%AF%AD%E8%A8%80%E5%95%86%E5%93%81%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%884%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="查询商品信息"><a href="#查询商品信息" class="headerlink" title="查询商品信息"></a>查询商品信息</h1><p>查询商品信息包括通过键盘录入查询商品编号或商品名称基本信息的功能。根据实际情况，可查询到该商品所有信息。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> l[<span class="number">20</span>], m;</span><br><span class="line"><span class="keyword">int</span> x, i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------------------------------------------------------------"</span>);</span><br><span class="line"><span class="keyword">if</span> (input == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n请选择查询方式：Q.退出  A.按商品编号  B.按商品名称\n"</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;m);</span><br><span class="line"><span class="keyword">switch</span> (m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'A'</span>:<span class="built_in">printf</span>(<span class="string">"请输入要查询的商品编号："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (x == a[i].num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n商品编号\t商品名称\t商品数量\t商品单价\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t\t%s\t\t%d\t\t%f\t\t\n"</span>, a[i].num, a[i].name, a[i].quantity, a[i].price);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t\t查无此商品\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'B'</span>:<span class="built_in">printf</span>(<span class="string">"请输入要查询的商品名称："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;l);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(l, a[i].name) == <span class="number">0</span>)<span class="comment">//比较字符串根据结果返回不同值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n商品编号\t商品名称\t商品数量\t商品单价\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t\t%s\t\t%d\t\t%f\t\t\n"</span>, a[i].num, a[i].name, a[i].quantity, a[i].price);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t\t查无此商品\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'q'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Q'</span>:</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">"\n\t\t输入错误\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  <span class="built_in">printf</span>(<span class="string">"-------------------------------------------------\n\t\t无可查询的商品信息\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h2><p>strcmp()函数有两个参数，即要比较的两个字符串。strcmp()函数对两个字符串进行大小写敏感的(case-sensitiVe)和字典式的(lexicographic)比较，并返回下列值之一：</p><pre><code>返  回  值         意  义</code></pre><hr><pre><code>&lt;0               第一个字符串小于第二个字符串 0               两个字符串相等    ·&gt;0               第一个字符串大于第二个字符串</code></pre><h1 id="商品信息排序"><a href="#商品信息排序" class="headerlink" title="商品信息排序"></a>商品信息排序</h1><p>商品信息排序包括通过键盘录入选择商品编号或商品名称从而进行排序的功能。根据实际情况，可直接观察商品排序后的信息。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">order</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,, j, tmp,mark[N];<span class="comment">//标记用于比较排序时的记号处理</span></span><br><span class="line"><span class="keyword">char</span> m;</span><br><span class="line"><span class="keyword">if</span> (input == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------------------------------------------------------------"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n请选择：Q.退出  A.按商品名称排序  B.按商品数量排序\n"</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;m);</span><br><span class="line"><span class="keyword">switch</span> (m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'A'</span>:<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">mark[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(a[mark[j]].name, a[mark[j + <span class="number">1</span>]].name) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp = mark[j];</span><br><span class="line">mark[j] = mark[j + <span class="number">1</span>];</span><br><span class="line">mark[j + <span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n商品编号\t商品名称\t商品数量\t商品单价\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t\t%s\t\t%d\t\t%f\t\t\n"</span>, a[mark[i]].num, a[mark[i]].name, a[mark[i]].quantity, a[mark[i]].price);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'B'</span>:<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">mark[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[mark[j]].quantity &lt; a[mark[j + <span class="number">1</span>]].quantity)</span><br><span class="line">&#123;</span><br><span class="line">tmp = mark[j];</span><br><span class="line">mark[j] = mark[j + <span class="number">1</span>];</span><br><span class="line">mark[j + <span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n商品编号\t商品名称\t商品数量\t商品单价\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t\t%s\t\t%d\t\t%f\t\t\n"</span>, a[mark[i]].num, a[mark[i]].name, a[mark[i]].quantity, a[mark[i]].price);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'q'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Q'</span>:</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">"\n\t\t输入错误\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  <span class="built_in">printf</span>(<span class="string">"---------------------------------------------------\n\t\t无可排序的商品信息\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 答辩材料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言商品进销存管理系统（3）</title>
      <link href="/2020/07/22/c%E8%AF%AD%E8%A8%80%E5%95%86%E5%93%81%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%883%EF%BC%89/"/>
      <url>/2020/07/22/c%E8%AF%AD%E8%A8%80%E5%95%86%E5%93%81%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="修改商品信息"><a href="#修改商品信息" class="headerlink" title="修改商品信息"></a>修改商品信息</h1><p>修改商品信息包括通过键盘录入并修改商品种类、商品编号、名称、数量、单价等基本信息的功能。根据实际情况，可修改已有商品信息。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,i,y;</span><br><span class="line"><span class="keyword">char</span> m;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-----------------------------------------------------------"</span>);</span><br><span class="line"><span class="keyword">if</span>(input==<span class="number">0</span>)<span class="comment">//判断input的值来确定是否有商品</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"无可销售的商品信息!\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入需要修改的商品编号: "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x==a[i].num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n商品编号\t商品名称\t商品数量\t商品单价\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t\t%s\t\t%d\t\t%.2f\t\t\n"</span>,a[i].num,a[i].name,a[i].quantity,a[i].price);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n--------------------------------------------------------------"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nQ.退出  A.修改名称  B.修改数量  C.修改单价\n请选择:"</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;m);</span><br><span class="line"><span class="keyword">switch</span>(m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"请输入%s商品的名称："</span>,a[i].name);</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%s"</span>,a[i].name);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"\n--------------------------------------------------------------------"</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"\n商品编号\t商品名称\t商品数量\t商品单价\n"</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%d\t\t%s\t\t%d\t\t%.2f\t\t\n"</span>,a[i].num,a[i].name,a[i].quantity,a[i].price);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'B'</span>:</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"\t商品数量："</span>);</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].quantity);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"\n--------------------------------------------------------------------"</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"\n商品编号\t商品名称\t商品数量\t商品单价\n"</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%d\t\t%s\t\t%d\t\t%.2f\t\t\n"</span>,a[i].num,a[i].name,a[i].quantity,a[i].price);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"\t商品单价："</span>);</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;a[i].price);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"\n--------------------------------------------------------------------"</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"\n商品编号\t商品名称\t商品数量\t商品单价\n"</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%d\t\t%s\t\t%d\t\t%.2f\t\t\n"</span>,a[i].num,a[i].name,a[i].quantity,a[i].price);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'q'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Q'</span>:</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">"\n\t\t输入错误\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n\t\t查无此商品\n"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="增加删除商品信息"><a href="#增加删除商品信息" class="headerlink" title="增加删除商品信息"></a>增加删除商品信息</h1><p>增加删除商品信息包括通过键盘录入商品种类、商品编号、名称、数量、单价等基本信息的功能。根据实际情况，可增加商品录入信息，删除功能可删除已有的商品</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> temp,i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t请输入所添加商品的编号："</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(temp==a[i].num)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t%d商品已存在！\n"</span>,temp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n++;</span><br><span class="line"></span><br><span class="line">a[i].num=temp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t请输入%d商品的名称："</span>,temp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a[i].name);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t请输入%d商品的数量："</span>,temp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].quantity);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t请输入%d商品的单价："</span>,temp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f"</span>,&amp;a[i].price);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n..............................................................................."</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n商品编号\t商品名称\t商品数量\t商品单价\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t\t%s\t\t%d\t\t%f\t\t\n"</span>, a[i].num, a[i].name, a[i].quantity, a[i].price);</span><br><span class="line"></span><br><span class="line">input=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> temp,i,j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> choice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(input==<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t\t无商品信息！\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t请输入要删除商品的编号："</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(temp==a[i].num)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n商品编号\t商品名称\t商品数量\t商品单价\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t\t%s\t\t%d\t\t%f\t\t\n"</span>, a[i].num, a[i].name, a[i].quantity, a[i].price);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t确定要删除该商品吗?(Y or N)"</span>);</span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line">choice = getchar();</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (choice)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'y'</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'Y'</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)<span class="comment">//依次往前移动后续商品，覆盖当前商品，实现删除</span></span><br><span class="line"></span><br><span class="line">a[j<span class="number">-1</span>]=a[j];<span class="comment">//商品信息全部移位</span></span><br><span class="line"></span><br><span class="line">n--;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t%d商品已删除！\n"</span>,temp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)<span class="comment">//当删除的是系统中最后一件商品时，需要设置为系统无商品</span></span><br><span class="line"></span><br><span class="line">input=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'n'</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'N'</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t输入错误！\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t无此编号商品！\n"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">edit</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> m;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t请选择：Q.退出\tA.添加商品信息\tB.删除商品信息    "</span>);</span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(m)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'q'</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'Q'</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line"></span><br><span class="line">add(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'B'</span>:</span><br><span class="line"></span><br><span class="line">Delete(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"\n\t输入错误！\n"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二级菜单代码简洁</p>]]></content>
      
      
      <categories>
          
          <category> 答辩材料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言商品进销存管理系统（2）</title>
      <link href="/2020/07/22/c%E8%AF%AD%E8%A8%80%E5%95%86%E5%93%81%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%882%EF%BC%89/"/>
      <url>/2020/07/22/c%E8%AF%AD%E8%A8%80%E5%95%86%E5%93%81%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="输入进货信息"><a href="#输入进货信息" class="headerlink" title="输入进货信息"></a>输入进货信息</h1><p>​        输入进货信息包括通过键盘录入商品数量的功能。根据实际情况，可增加已有商品数量。输入进货信息的界面如图3-3所示</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">purchase</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,i,y;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------------------------------------------------------------"</span>);</span><br><span class="line"><span class="keyword">if</span>(input==<span class="number">1</span>)<span class="comment">//判断是否可进货</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n商品编号\t商品名称\t商品数量\t商品单价\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t\t%s\t\t%d\t\t%.2f\t\t\n"</span>,a[i].num,a[i].name,a[i].quantity,a[i].price);</span><br><span class="line">&#125;<span class="comment">//陈列已有商品</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入进货商品编号"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x==a[i].num)<span class="comment">//判断是否有对应商品</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入进货量 "</span>);</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;y);</span><br><span class="line">a[i].quantity+=y; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n商品编号\t商品名称\t商品数量\t商品单价\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t\t%s\t\t%d\t\t%.2f\t\t\n"</span>,a[i].num,a[i].name,a[i].quantity,a[i].price);<span class="comment">//完成进货后显示</span></span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//退出循环！！！</span></span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t无此编号商品！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  <span class="built_in">printf</span>(<span class="string">"--------------------------------------------------------------------\n\t\t无可购买的商品信息\n"</span>); </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="输入销售信息"><a href="#输入销售信息" class="headerlink" title="输入销售信息"></a>输入销售信息</h1><p>输入销售信息包括通过键盘录入商品数量的功能。根据实际情况，可减少已有商品数量信息。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sale</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,i,y;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-----------------------------------------------------------"</span>);</span><br><span class="line"><span class="keyword">if</span>(input==<span class="number">0</span>)<span class="comment">//判断input的值来确定是否有商品</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"无可销售的商品信息!\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">output_goods(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入销售商品编号 "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x==a[i].num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入销售量"</span>);</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;y);</span><br><span class="line"> <span class="keyword">while</span>(y&gt;a[i].quantity)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"请重新输入"</span>); </span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;y);</span><br><span class="line"> &#125;</span><br><span class="line">a[i].quantity-=y; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n商品编号\t商品名称\t商品数量\t商品单价\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t\t%s\t\t%d\t\t%.2f\t\t\n"</span>,a[i].num,a[i].name,a[i].quantity,a[i].price);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t\t无可销售的商品信息\n"</span>); </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：进货和销售类似，但可分为两种判断方式</p><p>区别在于return的使用</p><h2 id="return的常用作用有以下两种"><a href="#return的常用作用有以下两种" class="headerlink" title="return的常用作用有以下两种"></a>return的常用作用有以下两种</h2><p>一种是返回参数所用的关键字，假如一个有返回值的方法执行完了之后需要返回一个参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">functionTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">String</span> a = “abc”;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这个方法被调用之后就会返回一个值为abc的字符串，string result = functionTest();</p><p>第二种用法是，代码执行到此处终止。<br>比如当代码执行到某个地方会出现几种结果，然后其中一种结果就不能执行后续代码，这时候在那里加上一个return就可以终止后面的代码执行。</p>]]></content>
      
      
      <categories>
          
          <category> 答辩材料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言商品进销存管理系统（1）</title>
      <link href="/2020/07/22/c%E8%AF%AD%E8%A8%80%E5%95%86%E5%93%81%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%881%EF%BC%89/"/>
      <url>/2020/07/22/c%E8%AF%AD%E8%A8%80%E5%95%86%E5%93%81%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="商场进销存管理系统"><a href="#商场进销存管理系统" class="headerlink" title="商场进销存管理系统"></a>商场进销存管理系统</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​         商场进销存管理系统是典型的信息管理系统，其开发要求具备数据一致性和完整性强，应用程序功能完备，易使用等特点。该软件使用C语言编程实现，本系统主要完成对商场进销存的管理，<strong>包括商品信息录入，显示商品信息，显示商品信息，输入进货信息，输入销售信息，修改商品信息，增加删除商品信息，查询商品信息，保存商品信息到硬盘文件，从硬盘文获得商品信息，商品信息排序等功能。</strong>系统可以完成对各类信息的浏览、查询、添加、删除、修改等功能。此报告主要介绍本课题所完成的功能和开发的过程，重点的说明了系统设计的思想以及主要功能</p><h2 id="信息描述"><a href="#信息描述" class="headerlink" title="信息描述"></a>信息描述</h2><p>系统中，关于信息描述的格式采用C语言的<strong>结构体</strong>进行描述</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">product</span> </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">char</span> name[N];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> quantity;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">float</span> price;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所有商品信息，采用数组进行存储。</p><h2 id="商品信息录入"><a href="#商品信息录入" class="headerlink" title="商品信息录入"></a>商品信息录入</h2><p>商品信息录入包括通过键盘录入商品种类、商品编号、名称、数量、单价等基本信息的功能。根据实际情况，可增加其他录入信息。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input_goods</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入商品种类数:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n[%d]\t商品编号："</span>,i+<span class="number">1</span>);<span class="comment">//格式要求</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].num );</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)<span class="comment">//商品种类数控制输入</span></span><br><span class="line">        &#123;<span class="keyword">if</span>(a[i].num==a[j].num)</span><br><span class="line">            &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\t\t不能重复，请重新输入！\n\n..................................................\n"</span>);</span><br><span class="line"><span class="comment">//格式要求     </span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\t[%d]\t商品编号："</span>,i+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].num );</span><br><span class="line">j=<span class="number">-1</span>;<span class="comment">//执行for循环j++，使j=0,重新判断二次输入的标号是否重复</span></span><br><span class="line">&#125;<span class="comment">//商品编号未重复，退出循环，继续录入余下信息</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\t商品名称："</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a[i].name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\t商品数量："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].quantity);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\t商品单价："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f"</span>,&amp;a[i].price);<span class="built_in">printf</span>(<span class="string">"\n\n.......................................\n"</span>);  </span><br><span class="line">&#125;</span><br><span class="line">input=<span class="number">1</span>;<span class="comment">//标记，用于后序操作判断商品是否录入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="商品信息显示"><a href="#商品信息显示" class="headerlink" title="商品信息显示"></a>商品信息显示</h2><p>商品信息显示能将商品种类、商品编号、名称、数量、单价等基本信息显示的一大功能。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output_goods</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(input==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n商品编号\t商品名称\t商品数量\t商品单价\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t\t%s\t\t%d\t\t%.2f\t\t\n"</span>,a[i].num,a[i].name,a[i].quantity,a[i].price);</span><br><span class="line">            <span class="comment">//注意数字字符格式</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  <span class="built_in">printf</span>(<span class="string">"--------------------------------------------------------------------\n\t\t无可浏览的商品信息\n"</span>); </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 答辩材料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作用域运算符</title>
      <link href="/2020/07/07/%E5%9F%9F%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2020/07/07/%E5%9F%9F%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="作用域运算符"><a href="#作用域运算符" class="headerlink" title="作用域运算符"></a>作用域运算符</h1><h2 id="一、：："><a href="#一、：：" class="headerlink" title="一、：："></a>一、：：</h2><ol><li><p>代码块的作用域。在函数内如果有一个与全局变量重名的变量，可以用 ::a 的形式访问（a是全局变量名）。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;::a;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>​    的结果是 21 。</p><ol start="2"><li><p>类的静态成员访问。访问类的静态成员时，要采用 class_name::static_member_name 的方式访问。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">用于表示类的成员函数</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> age_;</span><br><span class="line"><span class="built_in">string</span> name_;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::setAge</span><span class="params">(<span class="keyword">int</span> age)</span> <span class="comment">//域运算符</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">age_ = age;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Student::getAge</span><span class="params">()</span> <span class="comment">//域运算符</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;age_&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> age_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>命名空间成员访问。访问命名空间中的成员时，要用 namespace_name::member_name 的方式访问。当然，也可以用 using 关键字省去命名空间名和作用域运算符。</p></li><li><p>枚举类型关键字访问。如果有一个枚举类型叫做 Enum ，其中有一个 one 关键字，可以用 Enum::one 来访问。但是，直接写 one 也是有效的，所以一般不用加上 Enum:: 。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符重载</title>
      <link href="/2020/07/07/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
      <url>/2020/07/07/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h1><ol><li>C++运算符重载的概念和原理<ol start="2"><li>C++重载=（C++重载赋值运算符）<ol start="3"><li>C++深拷贝和浅拷贝（C++深复制和浅复制）<ol start="4"><li>C++运算符重载为友元函数<ol start="5"><li>C++实现可变长度的动态数组<ol start="6"><li>C++重载&lt;&lt;和&gt;&gt;（C++重载输出运算符和输入运算符）<ol start="7"><li>C++重载()（强制类型转换运算符）<ol start="8"><li>C++重载++和–（自增和自减运算符）<ol start="9"><li>C++运算符重载注意事项以及汇总</li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol><h2 id="C-运算符重载的概念和原理"><a href="#C-运算符重载的概念和原理" class="headerlink" title="C++运算符重载的概念和原理"></a>C++运算符重载的概念和原理</h2><p>希望对象之间也能用这些运算符进行运算，以达到使程序更简洁、易懂的目的。例如，复数是可以进行四则运算的</p><p>利用 C++ 提供的“运算符重载”机制，赋予运算符新的功能，就能解决用<code>+</code>将两个复数对象相加这样的问题。</p><p>运算符重载，就是<strong>对已有的运算符赋予多重含义，使同一运算符作用于不同类型的数据时产生不同的行为。</strong>运算符重载的目的是使得 C++ 中的运算符也能够用来操作对象。</p><p>运算符重载的实质是编写以运算符作为名称的<strong>函数</strong>。</p><p>包含被重载的运算符的表达式会被编译成对运算符函数的调用，运算符的操作数成为函数调用时的实参，运算的结果就是函数的返回值。运算符可以被多次重载。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">返回值类型  <span class="keyword">operator</span>  运算符(形参表)</span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运算符可以被重载为全局函数，也可以被重载为成员函数。一般来说，倾向于将运算符重载为成员函数，这样能够较好地体现运算符和类的关系。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">double</span> real, imag;</span><br><span class="line">    Complex(<span class="keyword">double</span> r = <span class="number">0.0</span>, <span class="keyword">double</span> i = <span class="number">0.0</span>) : real(r), imag(i) &#123; &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> - (<span class="keyword">const</span> Complex &amp; c);</span><br><span class="line">&#125;;</span><br><span class="line">Complex <span class="keyword">operator</span> + (<span class="keyword">const</span> Complex &amp; a, <span class="keyword">const</span> Complex &amp; b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Complex(a.real + b.real, a.imag + b.imag); <span class="comment">//返回一个临时对象</span></span><br><span class="line">&#125;</span><br><span class="line">Complex Complex::<span class="keyword">operator</span> - (<span class="keyword">const</span> Complex &amp; c)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Complex(real - c.real, imag - c.imag); <span class="comment">//返回一个临时对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Complex a(4, 4), b(1, 1), c;</span><br><span class="line">    c = a + b; <span class="comment">//等价于 c = operator + (a,b);</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c.real &lt;&lt; <span class="string">","</span> &lt;&lt; c.imag &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (a - b).real &lt;&lt; <span class="string">","</span> &lt;&lt; (a - b).imag &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//a-b等价于a.operator - (b)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//程序将+重载为一个全局函数（只是为了演示这种做法，否则重载为成员函数更好），将-重载为一个成员函数。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>友元函数深度理解</title>
      <link href="/2020/07/07/%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0%E6%B7%B1%E5%BA%A6%E7%90%86%E8%A7%A3/"/>
      <url>/2020/07/07/%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0%E6%B7%B1%E5%BA%A6%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol><li>C++中引入友元函数，是为在该类中提供一个对外（除了他自己意外）访问的窗口;</li><li>这个友元函数他不属于该类的成员函数，他是定义在类外的普通函数，只是在类中声明该函数可以直接访问类中的<strong>private</strong>或者<strong>protected</strong>成员。</li></ol><h2 id="使用友元函数声明的一般形式："><a href="#使用友元函数声明的一般形式：" class="headerlink" title="使用友元函数声明的一般形式："></a>使用友元函数声明的一般形式：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">friend &lt;返回类型&gt; &lt;函数名&gt; (&lt;参数列表&gt;);</span><br></pre></td></tr></table></figure><h2 id="使用友元函数注意的要点："><a href="#使用友元函数注意的要点：" class="headerlink" title="使用友元函数注意的要点："></a>使用友元函数注意的要点：</h2><ol><li>类中通过使用关键字friend 来修饰友元函数，但该函数并不是类的成员函数，<strong>其声明可以放在类的私有部分，也可放在共有部分</strong>。<em>友元函数的定义在类体外实现，不需要加类限定。</em></li><li>一个类中的成员函数可以是另外一个类的友元函数，而且一个函数可以是多个类友元函数。</li><li>友元函数可以访问类中的私有成员和其他数据，但是访问不可直接使用数据成员，需要通过对对象进行引用。</li><li>友元函数在调用上同一般函数一样，不必通过对对象进行引用。</li></ol><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">persion</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">      persion(<span class="keyword">char</span> *pn); </span><br><span class="line"><span class="comment">//友元函数;</span></span><br><span class="line">      <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">setweigth</span><span class="params">(persion &amp;p,<span class="keyword">int</span> h)</span></span>;<span class="comment">//注意，参数列表中一般会有一个引用类型的形参,原因参考上面的使用要点3和4;</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">disp</span><span class="params">()</span></span>; <span class="comment">//类成员函数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">      <span class="keyword">int</span> weigth,age;      </span><br><span class="line">&#125;;</span><br><span class="line">persion::persion(<span class="keyword">char</span> *pn)   <span class="comment">//构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">strcpy</span>(name,pn);</span><br><span class="line">   weigth=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">persion::disp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">"--"</span>&lt;&lt;weigth&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//友元函数的具体实现：这里没有类限定例如 (perion::setweigth)这种形式,这里可以与上面的disp()做个对比，一个属于类的成员，有限定，不属于类的成员函数，没有加限定。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setweigth</span><span class="params">(persion &amp;pn,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(pn.name,pn);<span class="comment">//实现字符串复制</span></span><br><span class="line">pn.weigth=w;       <span class="comment">//私有成员数据赋值</span></span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">persion <span class="title">p</span><span class="params">(<span class="string">"zhansan"</span>)</span></span>;</span><br><span class="line">  <span class="comment">//调用实现setweigth(),与一般函数调用一致。</span></span><br><span class="line">  setweigth(p,<span class="number">60</span>); </span><br><span class="line">  p.disp();  <span class="comment">//调用类的成员函数。</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">第<span class="number">2</span>点示例</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wheel</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">car</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    car(<span class="keyword">char</span> *pn);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(wheel &amp;w)</span></span>;    <span class="comment">//成员函数，做成wheel类中友元函数实现</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line">car::car(<span class="keyword">char</span> *pn)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(name,pn);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wheel</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    wheel(<span class="keyword">int</span> s);</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">car::run</span><span class="params">(wheel &amp;w)</span></span>;   <span class="comment">//这里把car类的成员函数做了友元函数。</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> speed;</span><br><span class="line">&#125;;</span><br><span class="line">wheel::wheel(<span class="keyword">int</span> s)</span><br><span class="line">&#123;</span><br><span class="line">  speed=s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">wheel <span class="title">w</span><span class="params">(<span class="number">60</span>)</span></span>;</span><br><span class="line">    <span class="function">car <span class="title">c</span><span class="params">(<span class="string">"New car"</span>)</span></span>;</span><br><span class="line">    c.<span class="built_in">run</span>(w);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">car::run</span><span class="params">(wheel &amp;w)</span>   <span class="comment">//car类成员函数的实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"the car is running"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"name: "</span>&lt;&lt;name&lt;&lt;<span class="string">" speed :"</span>&lt;&lt;w.speed&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>友元函数没有this指针（因为友元函数不是类的成员），所以参数有三种情况:</p><p>1、访问非static成员时需要对象做参数。</p><p>2、访问static成员或全局变量时不需要对象做参数</p><p>3、如果做参数的对象是全局对象，则不需要对象做参数</p><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><p><strong>友元函数</strong><br>流运算符&lt;&lt;、&gt;&gt;、类型转换运算符不能定义为类的成员函数，只能是友元函数。<br>二元运算符在运算符重载时，一般声明为友元函数</p>]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多重继承</title>
      <link href="/2020/07/03/%E8%99%9A%E7%BB%A7%E6%89%BF/"/>
      <url>/2020/07/03/%E8%99%9A%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h1 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>一个派生类具有两个或两个以上的直接基类就是多重继承</p><ul><li><p>1 一个子类可以拥有多个父类；</p></li><li><p>2 子类拥有所有父类的成员变量；</p></li><li><p>3 子类继承所有父类的成员函数；</p></li><li><p>4 子类对象可以当作任意父类对象使用；</p><h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1></li></ul><h3 id="多重继承派生类的格式"><a href="#多重继承派生类的格式" class="headerlink" title="多重继承派生类的格式"></a>多重继承派生类的格式</h3><p>class 派生类名：继承方式1 基类名1，继承方式2 基类名，….</p><p>{  派生类类体  }；</p><h3 id="多重继承派生类的构造函数格式"><a href="#多重继承派生类的构造函数格式" class="headerlink" title="多重继承派生类的构造函数格式"></a>多重继承派生类的构造函数格式</h3><p>派生类名（总参数表）：基类名1（参数表1），基类名2（参数表2）,…</p><p>子对象名（参数表n+1），…//如果有子对象的话</p><p>{ 派生类函数体 }</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Base1(<span class="keyword">int</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Base1(int)called"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Base1()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Base1()called"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Base1()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~Base1()called"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Base2()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Base2()called"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">~Base2()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~Base2()called"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span><span class="keyword">public</span> Base1, Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Derived():Base2(),Base1()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Derived()called"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Derived(<span class="keyword">int</span> x) :Base1(x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Derived(int)called"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Derived()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~Derived()called"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Derived d;<span class="comment">//d对象创建时调用了那个构造器</span></span><br><span class="line">Derived d3 = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//等价于：Derived d3(3);该等价关系只出现于定义  新对象语句中</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上面语句是一个语句Derived d3定义对象的语句,d3=3是一个赋值句，</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Derived* d2 = <span class="keyword">new</span> Derived();</span><br><span class="line"><span class="keyword">delete</span> d2;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承与派生（粗略）</title>
      <link href="/2020/07/02/%E7%BB%A7%E6%89%BF%E4%B8%8E%E6%B4%BE%E7%94%9F%EF%BC%88%E7%B2%97%E7%95%A5%EF%BC%89/"/>
      <url>/2020/07/02/%E7%BB%A7%E6%89%BF%E4%B8%8E%E6%B4%BE%E7%94%9F%EF%BC%88%E7%B2%97%E7%95%A5%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="继承与派生（粗略）"><a href="#继承与派生（粗略）" class="headerlink" title="继承与派生（粗略）"></a>继承与派生（粗略）</h1><h2 id="派生权限"><a href="#派生权限" class="headerlink" title="派生权限"></a>派生权限</h2><p><img src="https://i.loli.net/2020/07/03/DnQ5U1eTNdRZJkS.png" alt=""></p><h2 id="派生（继承）："><a href="#派生（继承）：" class="headerlink" title="派生（继承）："></a>派生（继承）：</h2><p>​        通过派生，派生类（子类）会获得（父类）除了构造器和析构器之外的所有成员（包括数据和函数成员）。是最自然的一种代码反用的方式</p><h3 id="派生语法："><a href="#派生语法：" class="headerlink" title="派生语法："></a>派生语法：</h3><p><strong>class 派生类名: [派生方式] 基类名<br>        *<em>{<br>            *</em>派生类新增加的成员</strong><br>        }</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意</strong>：</h3><p>1.基类的构造函数和析构函数不能被继承，在派生类中，如果对派生类新增的成员进行初始化，需要加入派生类的构造函数 当派生类创建对象时，首先执行基类的构造函数，随后执行派生类的构造函数；</p><p>2.当撤销派生类对象时，先执行派生类的析构函数，在执行基类的析构函数。<br>当基类的构造函数没有参数或没有显式定义构造函数时，派生类可以不向基类传递参数，甚至可以不定义构造函数。</p><p>3.当基类构造函数不带参数时，派生类不一定需要定义构造函数，然而当基类构造函数哪怕只是带有一个参数，他所有的派生类都必须定义构造函数，甚至所定义的派生类构造函数可能为空，仅仅起参数传递的作用。 </p><p><strong>在定义派生类对象时，构造函数的执行顺序如下</strong>：<br>1.调用基类的构造函数，对基类数据成员初始化<br>2.调用内嵌对象成员的构造函数，对内嵌对象成员的数据初始化；<br>3.执行派生类的构造函数体，对派生类数据成员初始化。<br>撤销对象时，析构函数的调用顺序与构造函数的调用顺序正好相反。</p><h3 id="继承体系中的作用域"><a href="#继承体系中的作用域" class="headerlink" title="继承体系中的作用域"></a>继承体系中的作用域</h3><p>   1.在继承体系中，基类和派生类是两个不同的作用域，由此也进一步证明 ，基类的私有成员，无论在那种继承体系下都不能在派生类中访问。<br>   2.在继承体系中，基类和派生类中如果存在相同名字的成员，如果使用派生类对象调用此成员，会优先调用派生类中存在的成员，把基类中存在的隐藏掉—-&gt;同名隐藏<br>   相同名字的成员：同名成员变量、同名成名函数（与变量和函数的类型无关，只要是相同名字就好）<br>   所以，不要在继承体系中使用相同名字的成员   </p><h3 id="继承与派生之间的关系—-gt-赋值兼容规则"><a href="#继承与派生之间的关系—-gt-赋值兼容规则" class="headerlink" title="继承与派生之间的关系—&gt;赋值兼容规则"></a>继承与派生之间的关系—&gt;赋值兼容规则</h3><p><img src="https://i.loli.net/2020/07/03/eioOl8xcjgI65EU.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复制构造函数（拷贝函数）</title>
      <link href="/2020/06/30/%E6%8B%B7%E8%B4%9D%EF%BC%88%E5%A4%8D%E5%88%B6%EF%BC%89%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
      <url>/2020/06/30/%E6%8B%B7%E8%B4%9D%EF%BC%88%E5%A4%8D%E5%88%B6%EF%BC%89%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h1><h2 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h2><p><strong>类名（const 类名&amp; 引用对象名）</strong></p><p><strong>{  复制构造函数体 }</strong></p><h2 id="类对象的复制"><a href="#类对象的复制" class="headerlink" title="类对象的复制"></a>类对象的复制</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">   data(<span class="keyword">int</span> y,<span class="keyword">int</span> m,<span class="keyword">int</span> d):year(y),month(m),day(d)&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> year,month,day;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">data <span class="title">d1</span><span class="params">(<span class="number">2016</span>,<span class="number">10</span>,<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">    data <span class="title">d2</span><span class="params">(d1)</span><span class="comment">//等于data d2=d1;复制构造函数两种形式。</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复制构造函数调用时机"><a href="#复制构造函数调用时机" class="headerlink" title="复制构造函数调用时机"></a>复制构造函数调用时机</h2><p>1.对象通过另一个对象进行初始化</p><p>2.对象以值传递的方式传入函数参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(data d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="function">data <span class="title">di</span><span class="params">(<span class="number">2016</span>,<span class="number">10</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"> fun(d1);<span class="comment">//调用时将实参dl对象完整的传递给形参d对象</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.对象以值传递的方式从函数返回</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">data <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">data <span class="title">temp</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">data <span class="title">d1</span><span class="params">(<span class="number">2016</span>,<span class="number">10</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">    d1=fun();<span class="comment">//temp是在函数fun中定义，结束程序时，</span></span><br><span class="line">             <span class="comment">//return temp,按temp复制一个新的对象，然后</span></span><br><span class="line">     <span class="comment">//赋值给dl;</span></span><br><span class="line">    retrurn <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：以上复制构造函数由编译系统自动<strong>调用，编写</strong></p><h2 id="深浅复制"><a href="#深浅复制" class="headerlink" title="深浅复制"></a>深浅复制</h2><p><strong>浅拷贝</strong>（慎用）</p><p>​                概念：也称位拷贝，编译器只是将对象中的值采用基本类型值复制的方式拷贝过来，如果对象中管理资源，就会导致多个对象共享同一份资源（资源泄露），当一个对象销毁时就会将该资源释放，而此时另一些对象不知道该资源已经被释放，以为该资源还有效，所以当继续对资源进行操作时，就会发生访问违规。</p><p><strong>深拷贝</strong></p><p>​                概念： 在“深拷贝”的情况下，对于对象中动态成员，就不能仅仅简单地赋值了，而应该重新动态分配空间</p><p><strong>注：浅拷贝只是对指针的拷贝，拷贝后两个指针指向同一个内存空间，深拷贝不但对指针进行拷贝，而且对指针指向的内容进行拷贝，经深拷贝后的指针是指向两个不同地址的指针。</strong></p><p>即：动态分配空间地址冲突访问问题。</p><p>待补充！！！！</p>]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造函数与析构函数（重载）</title>
      <link href="/2020/06/30/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%EF%BC%88%E9%87%8D%E8%BD%BD%EF%BC%89/"/>
      <url>/2020/06/30/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%EF%BC%88%E9%87%8D%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="构造函数（可重载）"><a href="#构造函数（可重载）" class="headerlink" title="构造函数（可重载）"></a>构造函数（可重载）</h1><h1 id="重载规则"><a href="#重载规则" class="headerlink" title="重载规则"></a>重载规则</h1><p>1 函数名相同。<br>2 参数个数不同,参数的类型不同,参数<strong>顺序</strong>不同,均可构成重载。<br>3 返回值类型不同则不可以构成重载</p><h2 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h2><h3 id="（系统默认构造函数）"><a href="#（系统默认构造函数）" class="headerlink" title="（系统默认构造函数）"></a>（系统默认构造函数）</h3><p>类名（）</p><p>{ 函数体 }</p><p>注意：一旦定义了构造函数，默认构造函数就不存在了！</p><h2 id="含参构造"><a href="#含参构造" class="headerlink" title="含参构造"></a>含参构造</h2><p>类名（形式参数列表）</p><p>{ 函数体 }</p><h2 id="参数初始化表的特殊形式"><a href="#参数初始化表的特殊形式" class="headerlink" title="参数初始化表的特殊形式"></a>参数初始化表的特殊形式</h2><p><strong><em>类名（参数）：数据成员名1（初始化值），数据成员名2（）…</em></strong></p><p><strong><em>{ 函数体 }</em></strong></p><p>说明：如果数据成员是数组，则应当在构造函数的函数体中用语句对其赋值，而不是在<strong>参数初始化表</strong>中对其初始化。如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Class Student</span><br><span class="line"></span><br><span class="line">&#123;<span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    Student(<span class="keyword">int</span> n,chars,nam[]):num(n),sex(s)</span><br><span class="line">    </span><br><span class="line">    &#123;<span class="built_in">strcpy</span>(name,nam);&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> sex;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="构造函数默认值"><a href="#构造函数默认值" class="headerlink" title="构造函数默认值"></a>构造函数默认值</h2><p>C++函数的默认参数指的是在函数声明或者定义时给形式参数指定默认值，，从而在调用参数时可以少写参数，少掉的参数用默认值代替。</p><p>注意：</p><p>1、函数的默认参数只能指定一次，所以一般是在声明中；</p><p>2、声明中的任何一个默认参数右边的参数都必须全部是默认参数，也就是默认参数必须从<strong>最右边开始连续指定</strong>；</p><p>3、调用时任何一个给出值的参数左边的参数都必须全部给出具体值，也就是从左边开始连续给出参数值，不能隔空跳过。</p><h3 id="实列"><a href="#实列" class="headerlink" title="实列"></a>实列</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Box(<span class="keyword">int</span> h=<span class="number">2</span>,<span class="keyword">int</span> w=<span class="number">2</span>,<span class="keyword">int</span> l=<span class="number">2</span>);<span class="comment">//在声明构造函数时指定默认参数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">volume</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">height</span>,<span class="built_in">width</span>,length;</span><br><span class="line">&#125;;</span><br><span class="line">Box::Box(<span class="keyword">int</span> h,<span class="keyword">int</span> w,<span class="keyword">int</span> len)&#123;<span class="comment">//在定义函数时可以不指定默认参数</span></span><br><span class="line">    <span class="built_in">height</span>=h;</span><br><span class="line">    <span class="built_in">width</span>=w;</span><br><span class="line">    length=len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Box::volume</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">height</span>*<span class="built_in">width</span>*length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Box <span class="title">box1</span><span class="params">(<span class="number">1</span>)</span></span>;<span class="comment">//不指定第2、3个实参</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"box1's volume: "</span>&lt;&lt;box1.volume()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="function">Box <span class="title">box2</span><span class="params">(<span class="number">1</span>,<span class="number">3</span>)</span></span>;<span class="comment">// 不指定第3个实参</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"box2's volume: "</span>&lt;&lt;box2.volume()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    Box box3;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"box3's volume:"</span>&lt;&lt;box3.volume()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h1 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h1><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p><strong>~类名（）</strong></p><p><strong>{ 函数体 }</strong></p><p>①析构函数与类名同名<br>②析构函数无参（不可重载</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>   对象的释放顺序严格与定义顺序相反</p><p>（即析构函数的调用顺序严格与构造函数相反）</p><h3 id="可以理解为栈（先入后出）"><a href="#可以理解为栈（先入后出）" class="headerlink" title="可以理解为栈（先入后出）"></a>可以理解为栈（先入后出）</h3><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>销毁动态分配的资源</p><h3 id="默认析构函数"><a href="#默认析构函数" class="headerlink" title="默认析构函数"></a>默认析构函数</h3><p><strong>~类名（）</strong></p><p><strong>{    }</strong></p><p>注意：不能释放由new分配的空间，显式使用delete运算符来释放</p><p>构造函数使用new分配的内存</p><p>局部对象：在函数内用类名定义的对象<br>全局对象：在函数外用类名定义的对象<br>i：局部对象在函数运行完成时要释放<br>全局对象在整个程序执行完成后释放<br>ii：全局对象在编译阶段即分配单元</p><p>示例：类内new在类内delete</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> *px;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Myclass()&#123;</span><br><span class="line">px=<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*px&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Myclass()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> px;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Myclass my;</span><br><span class="line">my.Print();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>补充：构造函数==构造器</strong></p><p>​            <strong>析构函数==析构器</strong></p>]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树基本操作</title>
      <link href="/2020/06/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/06/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树的基本操作"><a href="#二叉树的基本操作" class="headerlink" title="二叉树的基本操作"></a>二叉树的基本操作</h1><h2 id="二叉树的建立"><a href="#二叉树的建立" class="headerlink" title="二叉树的建立"></a>二叉树的建立</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">CreateBTree</span><span class="params">(Node*&amp; T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ch != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">T = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">T-&gt;data = ch;</span><br><span class="line">CreateBTree(T-&gt;lchild);</span><br><span class="line">CreateBTree(T-&gt;rchild);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">T = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树三种排序"><a href="#二叉树三种排序" class="headerlink" title="二叉树三种排序"></a>二叉树三种排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(Node* T)</span><span class="comment">//先序遍历程序 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">PreOrder(T-&gt;lchild);</span><br><span class="line">PreOrder(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(Node* T)</span><span class="comment">//中序遍历程序 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (T-&gt;lchild != <span class="literal">NULL</span>) InOrder(T-&gt;lchild);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line"><span class="keyword">if</span> (T-&gt;rchild != <span class="literal">NULL</span>) InOrder(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(Node* T)</span><span class="comment">//后序遍历程序 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">PostOrder(T-&gt;lchild);</span><br><span class="line">PostOrder(T-&gt;rchild);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树结点及深度操作"><a href="#二叉树结点及深度操作" class="headerlink" title="二叉树结点及深度操作"></a>二叉树结点及深度操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(Node* T)</span><span class="comment">//计算树的深度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> depl, depr;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">depl = Depth(T-&gt;lchild);</span><br><span class="line">depr = Depth(T-&gt;rchild);</span><br><span class="line"><span class="keyword">if</span> (depl &gt;= depr)</span><br><span class="line"><span class="keyword">return</span> depl + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> depr + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Size</span><span class="params">(Node* T)</span><span class="comment">//计算二叉树结点个数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + Size(T-&gt;lchild) + Size(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Size2</span><span class="params">(Node* T)</span><span class="comment">//计算二叉树非叶子节点个数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> Size2(T-&gt;lchild) + Size2(T-&gt;rchild) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">Node* lchild, * rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Node* <span class="title">CreateBTree</span><span class="params">(Node*&amp; T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ch != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">T = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">T-&gt;data = ch;</span><br><span class="line">CreateBTree(T-&gt;lchild);</span><br><span class="line">CreateBTree(T-&gt;rchild);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">T = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(Node* T)</span><span class="comment">//先序遍历程序 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">PreOrder(T-&gt;lchild);</span><br><span class="line">PreOrder(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(Node* T)</span><span class="comment">//中序遍历程序 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (T-&gt;lchild != <span class="literal">NULL</span>) InOrder(T-&gt;lchild);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line"><span class="keyword">if</span> (T-&gt;rchild != <span class="literal">NULL</span>) InOrder(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(Node* T)</span><span class="comment">//后序遍历程序 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">PostOrder(T-&gt;lchild);</span><br><span class="line">PostOrder(T-&gt;rchild);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(Node* T)</span><span class="comment">//计算树的深度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> depl, depr;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">depl = Depth(T-&gt;lchild);</span><br><span class="line">depr = Depth(T-&gt;rchild);</span><br><span class="line"><span class="keyword">if</span> (depl &gt;= depr)</span><br><span class="line"><span class="keyword">return</span> depl + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> depr + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Size</span><span class="params">(Node* T)</span><span class="comment">//计算二叉树结点个数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + Size(T-&gt;lchild) + Size(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Size2</span><span class="params">(Node* T)</span><span class="comment">//计算二叉树非叶子节点个数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> Size2(T-&gt;lchild) + Size2(T-&gt;rchild) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* S = <span class="literal">NULL</span>;<span class="comment">//实参</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入二叉树链表中各个域的值(输入0表示NULL)\n"</span>;</span><br><span class="line">BTree tree;</span><br><span class="line">tree.CreateBTree(S);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"建立的二叉树为：\n"</span>;</span><br><span class="line">tree.PreOrder(S);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" 先序\n"</span>;</span><br><span class="line">tree.InOrder(S);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" 中序\n"</span>;</span><br><span class="line">tree.PostOrder(S);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" 后序\n"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n该二叉树深度为:\n"</span> &lt;&lt;  tree.Depth(S);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n该二叉树结点个数:\n"</span> &lt;&lt;  tree.Size(S);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n该二叉树非叶子节点个数 :\n"</span> &lt;&lt;  tree.Size2(S);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>二叉树建立及基本特点，递归函数的使用方法</p><h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><p>​     了解二叉树的查找算法，丰富二叉树功能。下次呈现！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过河卒</title>
      <link href="/2020/06/22/%E8%BF%87%E6%B2%B3%E5%8D%92/"/>
      <url>/2020/06/22/%E8%BF%87%E6%B2%B3%E5%8D%92/</url>
      
        <content type="html"><![CDATA[<h1 id="洛谷-P１００２"><a href="#洛谷-P１００２" class="headerlink" title="洛谷-P１００２"></a>洛谷-P１００２</h1><p>棋盘上 A<em>A</em> 点有一个过河卒，需要走到目标 B<em>B</em> 点。卒行走的规则：可以向下、或者向右。同时在棋盘上 C<em>C</em>点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。</p><p>棋盘用坐标表示，A<em>A</em> 点 (0, 0)(0,0)、B<em>B</em> 点 (n, m)(<em>n</em>,<em>m</em>)，同样马的位置坐标是需要给出的。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/vg6k477j.png" alt="img"></p><p>现在要求你计算出卒从 A<em>A</em> 点能够到达 B<em>B</em> 点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> x,y,mx,my;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">30</span>][<span class="number">30</span>],<span class="built_in">map</span>[<span class="number">30</span>][<span class="number">30</span>];<span class="comment">//地图位置</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bj</span><span class="params">(<span class="keyword">int</span> mmx,<span class="keyword">int</span> mmy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>[mmx][mmy]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">map</span>[mmx<span class="number">-1</span>][mmy<span class="number">-2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">map</span>[mmx<span class="number">-2</span>][mmy<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">map</span>[mmx<span class="number">-2</span>][mmy+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">map</span>[mmx<span class="number">-1</span>][mmy+<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">map</span>[mmx+<span class="number">1</span>][mmy<span class="number">-2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">map</span>[mmx+<span class="number">2</span>][mmy<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">map</span>[mmx+<span class="number">2</span>][mmy+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">map</span>[mmx+<span class="number">1</span>][mmy+<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">//被控制点位</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    a[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;mx&gt;&gt;my;</span><br><span class="line">    bj(mx,my);<span class="comment">//调用</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=x+<span class="number">1</span>;i++)<span class="comment">//x+1移动位置,避免负数,下同</span></span><br><span class="line">    &#123;    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=y+<span class="number">1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">           a[i][j]=a[i<span class="number">-1</span>][j]+a[i][j<span class="number">-1</span>];<span class="comment">//加法原理</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[i<span class="number">-1</span>][j<span class="number">-1</span>])a[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a[x+<span class="number">1</span>][y+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解题思想"><a href="#解题思想" class="headerlink" title="解题思想"></a>解题思想</h2><h3 id="1-递推"><a href="#1-递推" class="headerlink" title="1.递推"></a>1.递推</h3><p>a[i][j]=a[i-1][j]+a[i][j-1]</p><h3 id="2-加法原理"><a href="#2-加法原理" class="headerlink" title="2.加法原理"></a>2.加法原理</h3><p>加法原理是分类<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=68529775&ss_c=ssc.citiao.link" target="_blank" rel="noopener">计数原理</a>，常用于排列组合中，具体是指：做一件事，完成它可以有<a href="javascript:"><img src="https://pic.baike.soso.com/ugc/baikepic2/10026/20171026064801-1372440496.jpg/0" alt="img"></a>类方法，在第一类方法中有<a href="javascript:"><img src="https://pic.baike.soso.com/ugc/baikepic2/22553/20171026064801-940139457.jpg/0" alt="img"></a>种不同方法，在第二类方法中有<a href="javascript:"><img src="https://pic.baike.soso.com/ugc/baikepic2/6598/20171026064801-334726554.jpg/0" alt="img"></a>种不同方法，……，在第<a href="javascript:"><img src="https://pic.baike.soso.com/ugc/baikepic2/10026/20171026064801-1372440496.jpg/0" alt="img"></a>类方法中有<a href="javascript:"><img src="https://pic.baike.soso.com/ugc/baikepic2/10627/20171026064801-1296215814.jpg/0" alt="img"></a>种不同方法，那么完成这件事共有<a href="javascript:"><img src="https://pic.baike.soso.com/ugc/baikepic2/7294/20171026064801-809325235.jpg/0" alt="img"></a>种不同的方法。</p><h3 id="3-动态分配"><a href="#3-动态分配" class="headerlink" title="3.动态分配"></a>3.动态分配</h3><h3 id="4-避免越界"><a href="#4-避免越界" class="headerlink" title="4.避免越界"></a>4.避免越界</h3>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序优化</title>
      <link href="/2020/06/19/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96/"/>
      <url>/2020/06/19/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p>//冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不会再交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=340252&ss_c=ssc.citiao.link" target="_blank" rel="noopener">稳定排序</a>算法。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="普通代码"><a href="#普通代码" class="headerlink" title="普通代码"></a>普通代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(arr&amp;&amp;<span class="built_in">size</span>)<span class="comment">//判断程序报错终止程序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span><span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">size</span><span class="number">-1</span>-i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = <span class="built_in">array</span>[j];</span><br><span class="line">                <span class="built_in">array</span>[j] = <span class="built_in">array</span>[j+<span class="number">1</span>];</span><br><span class="line">                <span class="built_in">array</span>[j+<span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort_Optimize_1</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(arr&amp;&amp;<span class="built_in">size</span>)<span class="comment">//判断程序报错终止程序</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">size</span>=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>；<span class="comment">//单一元素无需排序  </span></span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;<span class="comment">//定义标识符有序或无序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span><span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag=<span class="number">1</span>;<span class="comment">//开始置于1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">size</span><span class="number">-1</span>-i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = <span class="built_in">array</span>[j];</span><br><span class="line">                <span class="built_in">array</span>[j] = <span class="built_in">array</span>[j+<span class="number">1</span>];</span><br><span class="line">                <span class="built_in">array</span>[j+<span class="number">1</span>] = tmp;</span><br><span class="line">                flag =<span class="number">0</span>;<span class="comment">//交换完成置于0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//flag为1则已经有序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort_Optimize_2</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(arr&amp;&amp;<span class="built_in">size</span>)<span class="comment">//判断程序报错终止程序</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">size</span>=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>；<span class="comment">//单一元素无需排序  </span></span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;<span class="comment">//定义标识符有序或无序</span></span><br><span class="line">    <span class="keyword">int</span> index=<span class="built_in">size</span><span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> max_index=<span class="number">0</span>;<span class="comment">//每一次找到无序区的上界</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span><span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag=<span class="number">1</span>;<span class="comment">//开始置于1</span></span><br><span class="line">        max_index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">size</span><span class="number">-1</span>-i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = <span class="built_in">array</span>[j];</span><br><span class="line">                <span class="built_in">array</span>[j] = <span class="built_in">array</span>[j+<span class="number">1</span>];</span><br><span class="line">                <span class="built_in">array</span>[j+<span class="number">1</span>] = tmp;</span><br><span class="line">                flag =<span class="number">0</span>;<span class="comment">//交换完成置于0</span></span><br><span class="line">                max_index=j;<span class="comment">//注意不要在这里直接将index置为j</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//flag为1则已经有序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5CDELL%5CDesktop%5CCSDN_1592554770412.jpg" alt="CSDN_1592554770412"></p><h2 id="标记理解（flag）"><a href="#标记理解（flag）" class="headerlink" title="标记理解（flag）"></a>标记理解（flag）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> flag<span class="comment">//用来判断循环后是否有元素位置发生变化</span></span><br><span class="line">   <span class="comment">//控制循环次数，避免多余交换</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型理解1</title>
      <link href="/2020/06/18/%E6%B3%9B%E5%9E%8B%E7%90%86%E8%A7%A31/"/>
      <url>/2020/06/18/%E6%B3%9B%E5%9E%8B%E7%90%86%E8%A7%A31/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型：将类型参数化"><a href="#泛型：将类型参数化" class="headerlink" title="泛型：将类型参数化"></a>泛型：将类型参数化</h1><h2 id="普通栈"><a href="#普通栈" class="headerlink" title="普通栈"></a>普通栈</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span>[] m_item;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> item)</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">this</span>.m_item = <span class="keyword">new</span> <span class="keyword">int</span>[i];</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型Object来实现这个栈"><a href="#数据类型Object来实现这个栈" class="headerlink" title="数据类型Object来实现这个栈"></a>数据类型Object来实现这个栈</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> object[] m_item;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> object <span class="title">Pop</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span><span class="params">(object item)</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.m_item = <span class="keyword">new</span>[i];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面是用泛型来重写上面的栈，用一个通用的数据类型T来作为一个占位符，等待在实例化时用一个实际的类型来代替。让我们来看看泛型的威力：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;T&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T[] m_item;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Pop</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span><span class="params">(T item)</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">this</span>.m_item = <span class="keyword">new</span> T[i];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类的写法不变，只是引入了通用数据类型T就可以适用于任何数据类型，并且类型安全的。这个类的调用方法：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化只能保存int类型的类</span></span><br><span class="line"></span><br><span class="line">Stack&lt;<span class="keyword">int</span>&gt; a = <span class="keyword">new</span> Stack&lt;<span class="keyword">int</span>&gt;(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">   a.Push(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">   a.Push(<span class="string">"8888"</span>);<span class="comment">//这行编译不通过，因为类a只接收int类型的数据</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> x = a.Pop();</span><br><span class="line"></span><br><span class="line">Stack&lt;<span class="keyword">String</span>&gt; b = <span class="keyword">new</span> Stack&lt;<span class="keyword">String</span>&gt;(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    b.Push(<span class="number">10</span>);<span class="comment">//这行编译不通过，因为类b只接收String类型的数据</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">String</span> y = b.Pop();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
